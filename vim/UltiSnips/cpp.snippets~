snippet fmatter
/*
author: ${1:Zhihao He}
date: ${2:`date +%Y/%m/*d`}
mail: ${3: thisisamailbox@126.com}
*/
snippet class "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`} {
public:
	${1/(\w+).*/$1/}(${2:arguments});
	virtual ~${1/(\w+).*/$1/}();

private:
	${0:/* data */}
};
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> ${3:temp};
endsnippet

snippet vec "std::vector (v)"
std::vector<${1:char}> ${3:temp};
endsnippet

snippet mfun "member func"
${1:void} ${2:`!p snip.rv = snip.basename`}::${3:Func}($4) {
	$0
}
endsnippet
global !p
import re
p='[A-Za-z_]\w*'
def func_notes(t):
	first = True
    	if t:
        	params = t.split(',')
        	notes ="" 
        	for pa in params:
			tmp = split_param(pa)
			if tmp:
				if first:
					notes =  ('@ ' + tmp + '\n')
					first = False
				else:
					notes +=('\t@' + tmp + '\n')	
        	return  notes

def split_param(w):
	tmp = re.findall(p, w)
	if tmp:
		return tmp[-1]
endglobal
snippet ffun "free func"
${1:void} ${2:Func}($3) {
	/*
	`!p snip.rv=func_notes(t[3])`
	*/
	$0
}
endsnippet

snippet hfun "header func"
${1:void} ${3:Func}($4);
endsnippet

snippet nsp "namespace .. (namespace)" !
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
$0
}${1/.+/ \/\/ namespace /m}$1
endsnippet

snippet uns "unnamed namespace" !
namespace {
$0
}  // unnamed namespace
endsnippet

snippet fori "for int loop (fori)"
for ( ${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2} ) {
	${0:/* code */}
}
endsnippet

snippet ss "std::string"
std::string $0
endsnippet

snippet ssr "std::string"
const std::string &$0
endsnippet

snippet sv "std::vector"
std::vector< ${1:std::string} > $2
endsnippet

snippet svr "std::vector"
const std::vector< ${1:std::string} > &$2
endsnippet

snippet sd "std::"
std::
endsnippet

snippet cr "const type&"
const ${1:type} &${2:var}
endsnippet

snippet cs "const string&"
const string &$0
endsnippet
